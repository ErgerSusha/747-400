get_page_dims(pdf_file) #595.276 790.866
library(tabulizer)
library(dplyr)
library(tidyr)
library(tibble)
library(purrr)
library(janitor)
#Bloudek 2021_Cost of healthcare for patients with migraine in five European countries.pdf
pdf_file <- "Bloudek 2021_Cost of healthcare for patients with migraine in five European countries.pdf"
get_page_dims(pdf_file) #595.276 790.866
6.3*2+23.2
6.3/2
3.15+5
3000/(6394*12)
3700*270
1/15
for(i in 1:10)print(i)
for(i in 1:10)print(1/(10-i))
for(i in 0:9)print(10/(10-i))
for(i in 0:9)print(i/(10))
600000/50000000
14:09:01
15:10:26
300/60
30*60
4*60
450/8
600/60
25*60
5*60
35*60
6400/117
setwd("~/nvme/X-Plane 12/Aircraft/wip/747-400/documentation/developer assets")
options(scipen = 999)
tFlight<-"flight_tests/mSparks/flight_data.jdat"
testsFrom<-"XP1209-2024/01/01 00:00" #only report flight tests after this OP Program
#testsFrom<-"All"
myFlights<-FALSE #Set to false to read from sent flight tests folder
test_pilot<-"mSparks" #Set to test pilot name for myFlights
library(NISTunits)
getDistance<-function(lat1,lon1,lat2,lon2){
alat=NISTdegTOradian(lat1)
alon=NISTdegTOradian(lon1)
blat=NISTdegTOradian(lat2)
blon=NISTdegTOradian(lon2)
av=sin(alat)*sin(blat) + cos(alat)*cos(blat)*cos(blon-alon)
if (av > 1)
av=1
retVal=acos(av) * 3440
return (retVal)
}
processRow <- function(row){
if(startsWith(row,"{")){
isValid<-FALSE
json_final<-tryCatch({
fromJSON(row)
isValid<-TRUE
}, error = function(e) {})
if(isValid)
return(data.frame(data=row))
else {
return(data.frame())
}
} else {
return(data.frame())
}
}
parseTestFlight<-function(filename){
retVal<-list()
flight_data<-mapReduce_map_ndjson(filename,processRow)
flight_data<-mapReduce_reduce(flight_data)
#flight_data is now a list of json object strings in date order
flight_tests<-data.frame()
in_test_flight<-FALSE
currentOPProgram<-NA
currentEngines<-NA
startTime<-NA
lastTime<-NA
lastLat<-NA
lastLong<-NA
currentDistance<-0
for(fentry in flight_data$data){
json_data<-fromJSON(fentry) #tryCatch({fromJSON(fentry)}, error = function(e) {fromJSON("{}")})
if(!is.null(json_data[["PLANE"]])){
if(!is.na(lastTime)){
print(lastTime)
print(currentDistance)
if(currentDistance>0){
startTimeT<-as.numeric(as.POSIXct(strptime(startTime, "%Y/%m/%d %H:%M:%S")))
endTimeT<-as.numeric(as.POSIXct(strptime(lastTime, "%Y/%m/%d %H:%M:%S")))
duration<-((endTimeT-startTimeT)/60)
flight_tests<-rbind(flight_tests,data.frame(currentOPProgram,currentEngines,startTime,lastTime,distance=currentDistance,duration))
}
}
currentOPProgram<-json_data$FMC$INIT$op_program
#print(currentOPProgram)
currentEngines<-json_data$PLANE$engines
if(json_data$FMC$INIT$op_program>=testsFrom){
in_test_flight<-TRUE
startTime<-NA
lastTime<-NA
lastLat<-NA
lastLong<-NA
currentDistance<-0
}
else {
in_test_flight<-FALSE
startTime<-NA
lastTime<-NA
lastLat<-NA
lastLong<-NA
currentDistance<-0
}
}
if(in_test_flight&&!is.null(json_data[["time"]])){
if(is.na(startTime)){
startTime<-json_data[["time"]]
lastTime<-json_data[["time"]]
print(json_data[["time"]])
} else {
lastTime<-json_data[["time"]]
}
if(!is.null(json_data[["flightData"]])){
if(is.na(lastLat)){
lastLat<-json_data$flightData$simDR_latitude
lastLong<-json_data$flightData$simDR_longitude
}else{
thisDistance<-getDistance(lastLat,lastLong,json_data$flightData$simDR_latitude,json_data$flightData$simDR_longitude)
lastLat<-json_data$flightData$simDR_latitude
lastLong<-json_data$flightData$simDR_longitude
currentDistance<-currentDistance+thisDistance
}
}
}
}
print(startTime)
print(currentDistance)
if(currentDistance>0){
startTimeT<-as.numeric(as.POSIXct(strptime(startTime, "%Y/%m/%d %H:%M:%S")))
endTimeT<-as.numeric(as.POSIXct(strptime(lastTime, "%Y/%m/%d %H:%M:%S")))
duration<-((endTimeT-startTimeT)/60)
flight_tests<-rbind(flight_tests,data.frame(currentOPProgram,currentEngines,startTime,lastTime,distance=currentDistance,duration))
}
return(flight_tests)
}
flight_tests<-data.frame()
if(!myFlights)
{
test_pilots<-list.dirs(path = "flight_tests", full.names = FALSE, recursive = FALSE)
for(test_pilot in test_pilots){
print(test_pilot)
testFlights<-list.files(path=CONCAT("flight_tests/",test_pilot,""), pattern=NULL, all.files=FALSE, full.names=TRUE)
print(testFlights)
for(testFlight in testFlights){
theseFlights<-parseTestFlight(testFlight)
flight_tests<-rbind(flight_tests,data.frame(test_pilot,theseFlights))
}
}
} else {
testFlightsFolders<-list.dirs(path = "../../liveries/", full.names = TRUE, recursive = FALSE)
for(test_flight in testFlightsFolders){
print(test_flight)
testFlights<-list.files(path=test_flight, pattern=".jdat", all.files=FALSE, full.names=TRUE)
if(length(testFlights)==0)
next
theseFlights<-parseTestFlight(testFlights)
if(nrow(theseFlights)>0)
flight_tests<-rbind(flight_tests,data.frame(test_pilot,theseFlights))
}
}
options(scipen = 999)
libray(NHMStandardLib)
options(scipen = 999)
library(NHMStandardLib)
tFlight<-"flight_tests/mSparks/flight_data.jdat"
testsFrom<-"XP1209-2024/01/01 00:00" #only report flight tests after this OP Program
#testsFrom<-"All"
myFlights<-FALSE #Set to false to read from sent flight tests folder
test_pilot<-"mSparks" #Set to test pilot name for myFlights
library(NISTunits)
getDistance<-function(lat1,lon1,lat2,lon2){
alat=NISTdegTOradian(lat1)
alon=NISTdegTOradian(lon1)
blat=NISTdegTOradian(lat2)
blon=NISTdegTOradian(lon2)
av=sin(alat)*sin(blat) + cos(alat)*cos(blat)*cos(blon-alon)
if (av > 1)
av=1
retVal=acos(av) * 3440
return (retVal)
}
processRow <- function(row){
if(startsWith(row,"{")){
isValid<-FALSE
json_final<-tryCatch({
fromJSON(row)
isValid<-TRUE
}, error = function(e) {})
if(isValid)
return(data.frame(data=row))
else {
return(data.frame())
}
} else {
return(data.frame())
}
}
parseTestFlight<-function(filename){
retVal<-list()
flight_data<-mapReduce_map_ndjson(filename,processRow)
flight_data<-mapReduce_reduce(flight_data)
#flight_data is now a list of json object strings in date order
flight_tests<-data.frame()
in_test_flight<-FALSE
currentOPProgram<-NA
currentEngines<-NA
startTime<-NA
lastTime<-NA
lastLat<-NA
lastLong<-NA
currentDistance<-0
for(fentry in flight_data$data){
json_data<-fromJSON(fentry) #tryCatch({fromJSON(fentry)}, error = function(e) {fromJSON("{}")})
if(!is.null(json_data[["PLANE"]])){
if(!is.na(lastTime)){
print(lastTime)
print(currentDistance)
if(currentDistance>0){
startTimeT<-as.numeric(as.POSIXct(strptime(startTime, "%Y/%m/%d %H:%M:%S")))
endTimeT<-as.numeric(as.POSIXct(strptime(lastTime, "%Y/%m/%d %H:%M:%S")))
duration<-((endTimeT-startTimeT)/60)
flight_tests<-rbind(flight_tests,data.frame(currentOPProgram,currentEngines,startTime,lastTime,distance=currentDistance,duration))
}
}
currentOPProgram<-json_data$FMC$INIT$op_program
#print(currentOPProgram)
currentEngines<-json_data$PLANE$engines
if(json_data$FMC$INIT$op_program>=testsFrom){
in_test_flight<-TRUE
startTime<-NA
lastTime<-NA
lastLat<-NA
lastLong<-NA
currentDistance<-0
}
else {
in_test_flight<-FALSE
startTime<-NA
lastTime<-NA
lastLat<-NA
lastLong<-NA
currentDistance<-0
}
}
if(in_test_flight&&!is.null(json_data[["time"]])){
if(is.na(startTime)){
startTime<-json_data[["time"]]
lastTime<-json_data[["time"]]
print(json_data[["time"]])
} else {
lastTime<-json_data[["time"]]
}
if(!is.null(json_data[["flightData"]])){
if(is.na(lastLat)){
lastLat<-json_data$flightData$simDR_latitude
lastLong<-json_data$flightData$simDR_longitude
}else{
thisDistance<-getDistance(lastLat,lastLong,json_data$flightData$simDR_latitude,json_data$flightData$simDR_longitude)
lastLat<-json_data$flightData$simDR_latitude
lastLong<-json_data$flightData$simDR_longitude
currentDistance<-currentDistance+thisDistance
}
}
}
}
print(startTime)
print(currentDistance)
if(currentDistance>0){
startTimeT<-as.numeric(as.POSIXct(strptime(startTime, "%Y/%m/%d %H:%M:%S")))
endTimeT<-as.numeric(as.POSIXct(strptime(lastTime, "%Y/%m/%d %H:%M:%S")))
duration<-((endTimeT-startTimeT)/60)
flight_tests<-rbind(flight_tests,data.frame(currentOPProgram,currentEngines,startTime,lastTime,distance=currentDistance,duration))
}
return(flight_tests)
}
flight_tests<-data.frame()
if(!myFlights)
{
test_pilots<-list.dirs(path = "flight_tests", full.names = FALSE, recursive = FALSE)
for(test_pilot in test_pilots){
print(test_pilot)
testFlights<-list.files(path=CONCAT("flight_tests/",test_pilot,""), pattern=NULL, all.files=FALSE, full.names=TRUE)
print(testFlights)
for(testFlight in testFlights){
theseFlights<-parseTestFlight(testFlight)
flight_tests<-rbind(flight_tests,data.frame(test_pilot,theseFlights))
}
}
} else {
testFlightsFolders<-list.dirs(path = "../../liveries/", full.names = TRUE, recursive = FALSE)
for(test_flight in testFlightsFolders){
print(test_flight)
testFlights<-list.files(path=test_flight, pattern=".jdat", all.files=FALSE, full.names=TRUE)
if(length(testFlights)==0)
next
theseFlights<-parseTestFlight(testFlights)
if(nrow(theseFlights)>0)
flight_tests<-rbind(flight_tests,data.frame(test_pilot,theseFlights))
}
}
View(flight_tests)
theseFlights<-parseTestFlight(testFlight)
source("~/nvme/X-Plane 12/Aircraft/wip/747-400/documentation/developer assets/test flight data recorder analysis.r", echo=TRUE)
filename<-"flight_tests/LiBai/flight_data(12).jdat"
retVal<-list()
flight_data<-mapReduce_map_ndjson(filename,processRow)
View(flight_data)
flight_data<-mapReduce_reduce(flight_data)
flight_tests<-data.frame()
in_test_flight<-FALSE
currentOPProgram<-NA
currentEngines<-NA
startTime<-NA
lastTime<-NA
lastLat<-NA
lastLong<-NA
currentDistance<-0
View(flight_data)
for(fentry in flight_data$data){
json_data<-fromJSON(fentry) #tryCatch({fromJSON(fentry)}, error = function(e) {fromJSON("{}")})
if(!is.null(json_data[["PLANE"]])){
if(!is.na(lastTime)){
print(lastTime)
print(currentDistance)
if(currentDistance>0){
startTimeT<-as.numeric(as.POSIXct(strptime(startTime, "%Y/%m/%d %H:%M:%S")))
endTimeT<-as.numeric(as.POSIXct(strptime(lastTime, "%Y/%m/%d %H:%M:%S")))
duration<-((endTimeT-startTimeT)/60)
flight_tests<-rbind(flight_tests,data.frame(currentOPProgram,currentEngines,startTime,lastTime,distance=currentDistance,duration))
}
}
currentOPProgram<-json_data$FMC$INIT$op_program
#print(currentOPProgram)
currentEngines<-json_data$PLANE$engines
if(json_data$FMC$INIT$op_program>=testsFrom){
in_test_flight<-TRUE
startTime<-NA
lastTime<-NA
lastLat<-NA
lastLong<-NA
currentDistance<-0
}
else {
in_test_flight<-FALSE
startTime<-NA
lastTime<-NA
lastLat<-NA
lastLong<-NA
currentDistance<-0
}
}
if(in_test_flight&&!is.null(json_data[["time"]])){
if(is.na(startTime)){
startTime<-json_data[["time"]]
lastTime<-json_data[["time"]]
print(json_data[["time"]])
} else {
lastTime<-json_data[["time"]]
}
if(!is.null(json_data[["flightData"]])){
if(is.na(lastLat)){
lastLat<-json_data$flightData$simDR_latitude
lastLong<-json_data$flightData$simDR_longitude
}else{
thisDistance<-getDistance(lastLat,lastLong,json_data$flightData$simDR_latitude,json_data$flightData$simDR_longitude)
lastLat<-json_data$flightData$simDR_latitude
lastLong<-json_data$flightData$simDR_longitude
currentDistance<-currentDistance+thisDistance
}
}
}
}
for(fentry in flight_data$data){
json_data<-fromJSON(fentry) #tryCatch({fromJSON(fentry)}, error = function(e) {fromJSON("{}")})
if(!is.null(json_data[["PLANE"]])){
if(!is.na(lastTime)){
print(lastTime)
print(currentDistance)
if(currentDistance>0){
startTimeT<-as.numeric(as.POSIXct(strptime(startTime, "%Y/%m/%d %H:%M:%S")))
endTimeT<-as.numeric(as.POSIXct(strptime(lastTime, "%Y/%m/%d %H:%M:%S")))
duration<-((endTimeT-startTimeT)/60)
flight_tests<-rbind(flight_tests,data.frame(currentOPProgram,currentEngines,startTime,lastTime,distance=currentDistance,duration))
}
}
currentOPProgram<-json_data$FMC$INIT$op_program
#print(currentOPProgram)
currentEngines<-json_data$PLANE$engines
if(json_data$FMC$INIT$op_program>=testsFrom){
in_test_flight<-TRUE
startTime<-NA
lastTime<-NA
lastLat<-NA
lastLong<-NA
currentDistance<-0
}
else {
in_test_flight<-FALSE
startTime<-NA
lastTime<-NA
lastLat<-NA
lastLong<-NA
currentDistance<-0
}
}
if(in_test_flight&&!is.null(json_data[["time"]])){
if(is.na(startTime)){
startTime<-json_data[["time"]]
lastTime<-json_data[["time"]]
print(json_data[["time"]])
} else {
lastTime<-json_data[["time"]]
}
if(!is.null(json_data[["flightData"]])){
if(is.na(lastLat)){
lastLat<-json_data$flightData$simDR_latitude
lastLong<-json_data$flightData$simDR_longitude
}else{
thisDistance<-getDistance(lastLat,lastLong,json_data$flightData$simDR_latitude,json_data$flightData$simDR_longitude)
lastLat<-json_data$flightData$simDR_latitude
lastLong<-json_data$flightData$simDR_longitude
currentDistance<-currentDistance+thisDistance
}
}
}
}
fentry <= flight_data$data[1]
fentry <- flight_data$data[1]
json_data<-fromJSON(fentry)
!is.null(json_data[["PLANE"]])
!is.na(lastTime)
json_data$FMC$INIT$op_program>=testsFrom
testsFrom
testsFrom<-"XP12-10-2024/01/01 00:00"
testsFrom
json_data$FMC$INIT$op_program>=testsFrom
json_data$FMC$INIT$op_program
for(fentry in flight_data$data){
json_data<-fromJSON(fentry) #tryCatch({fromJSON(fentry)}, error = function(e) {fromJSON("{}")})
if(!is.null(json_data[["PLANE"]])){
if(!is.na(lastTime)){
print(lastTime)
print(currentDistance)
if(currentDistance>0){
startTimeT<-as.numeric(as.POSIXct(strptime(startTime, "%Y/%m/%d %H:%M:%S")))
endTimeT<-as.numeric(as.POSIXct(strptime(lastTime, "%Y/%m/%d %H:%M:%S")))
duration<-((endTimeT-startTimeT)/60)
flight_tests<-rbind(flight_tests,data.frame(currentOPProgram,currentEngines,startTime,lastTime,distance=currentDistance,duration))
}
}
currentOPProgram<-json_data$FMC$INIT$op_program
#print(currentOPProgram)
currentEngines<-json_data$PLANE$engines
if(json_data$FMC$INIT$op_program>=testsFrom){
in_test_flight<-TRUE
startTime<-NA
lastTime<-NA
lastLat<-NA
lastLong<-NA
currentDistance<-0
}
else {
in_test_flight<-FALSE
startTime<-NA
lastTime<-NA
lastLat<-NA
lastLong<-NA
currentDistance<-0
}
}
if(in_test_flight&&!is.null(json_data[["time"]])){
if(is.na(startTime)){
startTime<-json_data[["time"]]
lastTime<-json_data[["time"]]
print(json_data[["time"]])
} else {
lastTime<-json_data[["time"]]
}
if(!is.null(json_data[["flightData"]])){
if(is.na(lastLat)){
lastLat<-json_data$flightData$simDR_latitude
lastLong<-json_data$flightData$simDR_longitude
}else{
thisDistance<-getDistance(lastLat,lastLong,json_data$flightData$simDR_latitude,json_data$flightData$simDR_longitude)
lastLat<-json_data$flightData$simDR_latitude
lastLong<-json_data$flightData$simDR_longitude
currentDistance<-currentDistance+thisDistance
}
}
}
}
print(startTime)
print(currentDistance)
if(currentDistance>0){
startTimeT<-as.numeric(as.POSIXct(strptime(startTime, "%Y/%m/%d %H:%M:%S")))
endTimeT<-as.numeric(as.POSIXct(strptime(lastTime, "%Y/%m/%d %H:%M:%S")))
duration<-((endTimeT-startTimeT)/60)
flight_tests<-rbind(flight_tests,data.frame(currentOPProgram,currentEngines,startTime,lastTime,distance=currentDistance,duration))
}
return(flight_tests)
View(flight_tests)
View(flight_tests)
